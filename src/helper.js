var Promise = require('bluebird');
var _ = require('lodash');

var helper = {

    //<editor-fold desc="getter">
    name: function () {
        return this.$name;
    },
    version: function () {
        return this.$version;
    },
    schema: function () {
        return this.$schema;
    },
    container: function () {
        return this.$container;
    },
    knex: function () {
        return this.$knex;
    },
    //</editor-fold>

    options: function () {
        return this.$options || (this.$options = {});
    },
    dbName: function () {
        var n = this.options().dbName || this.name();
        return n.toLowerCase();
    },

    privateTmp: function () {
        return this.__$__ || (this.__$__ = {});
    }

    ,
    promise: function (callback, action) {
        return new Promise(function (resolve, reject) {
            Promise.try(action)
                .then(function (result) {
                    resolve(_.isFunction(callback) ? callback(false, result) : result);
                })
                .catch(function (err) {
                    reject(_.isFunction(callback) ? callback(err) : err)
                })
        });
    },
    // event
    on: function (name, handler) {
        var store = this.privateTmp().events || (this.privateTmp().events = {});
        var listener = store[name] || (store[name] = []);
        listener.push(handler);
        return this;
    },
    emit: function (name, data, callback) {
        var store = this.privateTmp().events || (this.privateTmp().events = {});
        if (store[name]) {
            var listener = store[name];


            return helper.promise(callback, function () {
                return new Promise(function (resolve, reject) {

                    function exec(handle) {

                        var result = handle.apply(null, [data]);
                        Promise.resolve(result)
                            .then(function () {
                                next();
                            }, reject)
                    }

                    var i = 0;

                    function next() {
                        var handle = listener[i++];
                        if (handle) exec(handle);
                        else {
                            resolve();
                        }
                    }

                    next();

                })
            })
        }

        return helper.promise(callback, function () {
            return Promise.resolve();
        })
    },

    // field

    isUnique: function () {
        var opt = this.options();
        return (opt.isUnique || opt.unique) ? true : false
    },
    isRequired: function () {
        var opt = this.options();
        return (opt.isRequired || opt.required || opt.notNull || opt.notnull) ? true : false
    },
    isIndexed: function () {
        var opt = this.options();
        return (opt.isIndexed || opt.indexed || opt.index) ? true : false
    },
    isPrimaryKey: function () {
        var opt = this.options();
        return (opt.isPrimaryKey || opt.primaryKey || opt.pk || opt.primary) ? true : false
    },
    isLazy: function () {
        var opt = this.options();
        return (opt.isLazy || opt.lazy ) ? true : false
    },
    isVirtual: function () {
        var opt = this.options();
        return (opt.isVirtual || opt.virtual ) ? true : false
    },
    defaultValue: function () {
        var opt = this.options();
        return _.clone(opt.defaultValue || opt.default);
    },
    autoGenerated: function () {
        var opt = this.options();
        return (opt.autoGenerated || opt.generated || opt.gen)
    },


    t: 1
}

module.exports = helper;
module.exports.mixin = function (target, fields, source) {
    var src = source || helper;
    fields.map(function (key) {
        target[key] = src[key];
    })
}

